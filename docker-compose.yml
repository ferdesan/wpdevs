#docker compose --env-file .env up -d
#docker-compose up -d
#docker-compose down #mantem os dados
#docker-compose down --volumes #elimina os dados
#version: "3.8"

services:
  #Database
  db:
    env_file:
      - .env
    container_name: MySQL-WpDevs
    image: mysql:5.7
    ports:
      - "3306:3306"
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_HOST: "%" #permite acesso remoto ao root
      #MYSQL_ALLOW_EMPTY_PASSWORD: "yes" #da acesso ao usuário root sem senha
    restart: always
    volumes:
      - ./db_data:/var/lib/mysql

  #SGBD
  phpmyadmin:
    depends_on:
      - db
    env_file:
      - .env
    container_name: phpMyAdmin-WpDevs
    image: phpmyadmin
    environment:
      PMA_HOST: db
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    restart: always
    ports:
      - "8080:80"

  #Aplicação
  wordpress:
    depends_on:
      - db
    env_file:
      - .env
    container_name: WordPress-WpDevs
    image: wordpress:6.0.2-php8.0-apache
    volumes:
      - ./:/var/www/html
      - ./uploads.ini:/usr/local/etc/php/conf.d/uploads.ini
      # - ./wp-content:/var/www/html/wp-content
    ports:
      - "3000:80"
    environment:
      WORDPRESS_DB_HOST: db
      WORDPRESS_DB_USER: ${WORDPRESS_DB_USER}
      WORDPRESS_DB_PASSWORD: ${WORDPRESS_DB_PASSWORD}
      WORDPRESS_DB_NAME: ${WORDPRESS_DB_NAME}
